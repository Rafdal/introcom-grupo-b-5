*****************************************************************************************************************
*		TP3	EJERCICIO 2			GRUPO B4						*
*														*
* Consigna:													*
*	Escribir una rutina que encuentre el mayor de los elementos del array del ejercicio anterior		*
*	formado por elementos de 1 byte. Indicar los cambios que se deberian hacerse en el codigo		*
*	para que la rutina escrita se pueda utilizar para encontrar el elemento mayor del arreglo de 2		*
*	bytes cada uno (Se deberian hacer menos de 5 modificaciones en el codigo).				*
*****************************************************************************************************************
	p68h11

*********************************************************
*	DEFINICIONES Y ESTRUCTURA DE DATOS		*
* En esta seccion se definen la estructura del array 1	*
* y del array 2.					*
* Tambien definimos constantes del stack		*
*********************************************************
ARR_1 	EQU 	$3000		posicion inicial del primer array
N_1 	EQU 	6		cantidad de elementos del array
SIZE_1	EQU	1		tamaño de cada elemento (en bytes)

ARR_2 	EQU 	$3010		posicion inicial del primer array
N_2	EQU 	6		cantidad de elementos del array
SIZE_2	EQU	2		tamaño de cada elemento (en bytes)

STK_POS	EQU	$3500		posicion del fin de stack
STKSIZE	EQU	32		tamaño del stack

*********************************************************
*		PROGRAMA PRINCIPAL			*
*********************************************************

	org	$2000
main	EQU	*
	lds	#stk_ini	cargo la posicion inicial del stack

	ldx	#ARR_1		cargo la direccion en memoria del array
	ldaa	#N_1		cargo el largo del array (elementos)
	pshx			paso por stack la direccion
	psha			paso por stack el largo del array

	jsr	max_8		Invoco la subrutina para obtener el maximo de los elementos de 8 bits

	ins			Libero 2 bytes
	ins			del stack.
	pulb			Guardo en B el valor maximo retornado por la subrutina


	ldx	#ARR_2		cargo la direccion en memoria del array
	ldaa	#N_2		cargo el largo del array (elementos)
	pshx			paso por stack la direccion
	psha			paso por stack el largo del array

	jsr	max_16		Invoco la subrutina para obtener el maximo de los elementos de 8 bits
	
	ins			Libero 1 byte del stack
	pulx			Guardo en X el valor maximo retornado por la subrutina

fin	jmp	fin

*****************************************************************************************
*				SUBRUTINA MAX_8						*
* Funcion: Obtener el valor maximo de un arreglo de elementos numericos no signados	*
*	de 8 bits									*
*											*
* Inputs (via stack): 									*
* 	1) Direccion inicial de memoria del array (2 bytes)				*
*	2) Cantidad de elementos del array (1 byte)					*
* Outputs (via stack):									*
*	1) VACIO (2 bytes) - se deben liberar estos bytes residuales del stack		*
*	2) Mayor elemento del array (1 byte)						*
*****************************************************************************************
* [XH	] 0 <-(X)
* [XL	] 1	
* [PCH	] 2	
* [PCL	] 3
* [arr_len] 4
* [arr_pos H] 5
* [arr_pos L](max) 6

	ORG	$2300
max_8	EQU	*
	pshx			backup del registro X
	tsx			X=SP+1
	psha			backup del registro A
	pshb			backup del registro B
	pshy			backup del registro Y

	ldy	5,x		cargo la posicion inicial del array (Y = arr_pos)
	clr	6,x		inicio en cero la variable max para comparar (max = 0)
L01	EQU	*
	ldaa	0,y		leo el elemento del array en la posicion actual (A = array[Y])
	cmpa	6,x		comparo max con A (A-max)
	bls	menor0		si A es menor o igual que max, no lo guardo
	staa	6,x		Guardo A en max (max = A)

menor0	iny			aumento un byte

	dec	4,x		decremento la cantidad de elementos restanes a comparar
	bne	L01		si no es cero, repite

	puly			si era cero, recupero los backups
	pulb			de los registros
	pula
	pulx
	rts			retorno de la subrutina

*****************************************************************************************
*				SUBRUTINA MAX_16					*
* Funcion: Obtener el valor maximo de un arreglo de elementos numericos no signados	*
*	de 16 bits									*
*											*
* Inputs (via stack): 									*
* 	1) Direccion inicial de memoria del array (2 bytes)				*
*	2) Cantidad de elementos del array (1 byte)					*
* Outputs (via stack):									*
*	1) VACIO (1 byte) - se debe liberar este byte del stack 			*
*	2) Mayor elemento del array (2 bytes)						*
*****************************************************************************************
* [XH	] 0 <-(X)
* [XL	] 1	
* [PCH	] 2	
* [PCL	] 3
* [arr_len] 4
* [arr_pos H](max H) 5
* [arr_pos L](max L) 6

	ORG	$2400
max_16	EQU	*
	pshx			backup del registro X
	tsx			X=SP+1
	psha			backup del registro A
	pshb			backup del registro B
	pshy			backup del registro Y

	ldy	5,x		cargo la posicion inicial del array (Y = arr_pos)
	clr	5,x		inicio en cero la variable max (de 16 bits) para comparar (max = 0)
	clr	6,x										AGREGO (1)
L02	EQU	*
	ldd	0,y		leo el elemento del array en la posicion actual (D = array[Y])  CAMBIO (2)
	cpd	5,x		comparo max con D (D-max)					CAMBIO (3)
	bls	menor1		si D es menor o igual que max, no lo guardo
	std	5,x		Guardo D en max (max = D)					CAMBIO (4)

menor1	iny			aumento dos posiciones para
	iny			leer el siguiente elemento de 16 bits				AGREGO (5)

	dec	4,x		decremento la cantidad de elementos restanes a comparar
	bne	L02		si no es cero, repite

	puly			si termino de comparar, recupero los backups
	pulb			de los registros
	pula
	pulx
	rts			retorno de la subrutina

*********************************************************
*		AREA DE MEMORIA	Y DATOS			*
* En esta seccion se reservan las posiciones de memoria	*
* usadas por los arrays					*
* Y se los inicializan los arrays			*
*********************************************************
	org 	ARR_1
arr_1 	rmb 	SIZE_1*N_1	reservo bytes para el primer array

	org 	ARR_2
arr_2 	rmb 	SIZE_2*N_2	reservo bytes para el segundo array


	org 	ARR_1		inicializo el array 1
datos1	FCB	12,15,94,20,15,45
	org 	ARR_2		inicializo el array 2
datos2	FDB	1200,1235,44694,11920,50915,45

*********************************************************
*		AREA DEL STACK				*
*********************************************************

	ORG	STK_POS
stack	RMB	STKSIZE
stk_ini	EQU	*-1

	END
	p68h11

	public	delay,push_R,push_L

	rseg	CODE



*************************************************************************
*		# TESTED WORKING STABLE #	Sun 06  21:11		*
*************************************************************************
*		PUSH FROM RIGHT				*
* agrega un byte por la derecha de un vector de 	*
* longitud 2, desplazandolo todos sus elementos hacia 	*
* la izquierda						*
* Params: 						*
*	- [AccIY]: puntero al vector			*
* 	- [AccA]: byte a agregar.			*
* Nota: No devuelve valores, no es necesario liberar el *
* 	stack luego de invocarla			*
*********************************************************
* [A] 0 <- (X) [FP]
* [XH]
* [XL]
* [PCH]
* [PCL]
push_R	EQU	*
	pshx		;backup de X
	psha		;guardo el valor de A (byte a cargar)
	tsx
	pshy		;backup de Y (posición de memoria del vector)
	pshb		;backup de B

	ldab	#1	;cargo la cantidad de repeticiones del ciclo

L01	ldaa	1,y	;copio el valor siguiente
	staa	0,y	;y lo desplazo hacia la izquierda (posición anterior)
	iny		;voy a la sig. posición
	decb		;decremento la cantidad de ciclos restantes
	bne	L01	;si no son cero, repito


	ldaa	0,x	;leo el byte del input que debo pushear
	staa	0,y	;lo escribo en la última posición

	pulb		;recupero todos los backups
	puly
	pula
	pulx
	rts



*************************************************************************
*		# TESTED WORKING STABLE #	Sun 06  21:11		*
*************************************************************************
*		PUSH FROM LEFT				*
* agrega un byte por la izquierda de un vector de 	*
* longitud 2, moviendo todos los elementos a la derecha	*
* Params: 						*
* 	- [AccA]: byte a agregar.			*
*	- [AccIY]: puntero al vector			*
* Nota: No devuelve valores, no es necesario liberar el *
* 	stack luego de invocarla			*
*********************************************************
* [A] 0 <- (X)
* [XH]
* [XL]
* [PCH]
* [PCL]
push_L	EQU	*
	pshx		;backup de X
	psha		;guardo el valor de A (byte a cargar)
	tsx
	pshy		;backup de Y
	pshb		;backup de B

	ldab	#1	;cargo la cantidad de repeticiones del ciclo
	aby		agrego el desfase
	dey		resto 1 (porque necesito posicionarme en la posición anterior, no en la última)

L03	ldaa	0,y	;copio el valor de la posición actual
	staa	1,y	;y lo guardo en la posición siguiente (a la derecha)
	dey		;voy a la posición izquierda (anterior)
	decb		;decremento la cantidad de ciclos restantes
	bne	L03	;si no son cero, repito


	ldaa	0,x	;leo el byte del input que debo pushear
	staa	1,y	;lo escribo en la primera posición

	pulb		;recupero todos los backups
	puly
	pula
	pulx
	rts





*********************************************************
*		SUBRUTINA delay				*
*							*
* Esta subrutina genera un delay de aprox 1s para el	*
* simluador del wookie					*
* No recibe ningun parametro ni retorna valores, no 	*
* hace falta liberar el stack depues de invocarla	*
*********************************************************

delay	equ	*
	pshx			Hago backup de los registros	(4 ciclos)
	pshy							(5 ciclos)
	psha							(3 ciclos)
	pshb							(3 ciclos)
	ldaa	#14		Cargo la cantidad de repeticiones que hare con el loop1. (23 ciclos)
*								[TOTAL:17]

*	[LOOP1]: n recorridos del loop1 lleva n*(9+T) ciclos, siendo T los ciclos en total del loop2. 
loop1	ldy	#$D900		Cargo la cantidad de repeticiones que hare con el loop2. (4 ciclos)

* 	[LOOP2]: Un solo recorrido del loop2 lleva 9 ciclos, 55552 ($D900) recorridos del loop2 lleva 499968 ciclos
loop2	nop			retardo 		(2 ciclos)
	dey			decremento Y 		(4 ciclos)
	bne	loop2		salto si no es cero 	(3 ciclos)
*							[TOTAL:9]

	deca			decremento A	(2 ciclos)
	bne	loop1		si A!=0, repito (3 ciclos)


	ldy	#$12		Retardo 			(5 ciclos)
	pulb			Recupero el valor 		(4 ciclos)
	pula			de los	registros		(4 ciclos)
	puly							(6 ciclos)
	pulx							(5 ciclos)
	rts			Retorno de la rubrutina		(5 ciclos)
*								[TOTAL:29]

	END
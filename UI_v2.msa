*************************************************************************
*	USER INTERFACE MODULES	v2		UI_v2.msa		*
*									*
* subrutinas para controlar el display y declado			*
*************************************************************************

*	TO-DO:	TESTING

        p68h11

	public	initdis,waitkey,outchar,println,clrdis



******* Ports ***************************

DDRC	equ	$1007       	; data direction register for C
PIOC	equ	$1002       	; for strobe B assertion change
PORTCL	equ 	$1005       	; port C latched
PORTB	equ 	$1004		; port B
PORTC	equ	$1003		; rows

***** Row and column Masks *************************

FILA0	equ	00001110b  	; mascaras para manejo de filas
FILA1	equ	00001101b
FILA2	equ	00001011b
FILA3	equ	00000111b

COLUMN0	equ	11100000b	; mascaras para manejo de columnas
COLUMN1	equ	11010000b
COLUMN2	equ	10110000b

****** Nibble Mask ********************
NIBMASK	equ	$F0

	rseg	CODE

*********************************************************************************************************
*													*
* Las siguientes subrutinas utilizan las constantes definidas anteriormente para poder funcionar	*
*													*
*********************************************************************************************************

*******************************************************************************************************
* 
*	waitkey: devuelve el valor numerico de la tecla presionada en el teclado
*		por el registro A, para luego poder ser utilizada facilmente como
*		valor numerico.
*		- Pone el carry en 1 si no encontro el numero, y en 0 en caso de haberlo encontrado
* 
*******************************************************************************************************
waitkey	equ	*

	pshb	                ; hago backup del registro B
_input  equ     *      		; loop de chequeo: se fija si hay input

fi0	ldaa	#FILA0		; cargo la fila 0 con un 0
	staa	PORTC
	ldab	#0		; cargo B con el numero de fila
	jsr	evalfil
	bcc	finin		; si se encontro el numero, termino

fi1	ldaa	#FILA1		; cargo la fila 1 con un 0
	staa	PORTC
	ldab	#1		; cargo B con el numero de fila
	jsr	evalfil
	bcc	finin		; si se encontro el numero, termino

fi2	ldaa	#FILA2		; cargo la fila 2 con un 0
	staa	PORTC
	ldab	#2		; cargo B con el numero de fila
	jsr	evalfil
*				; si se encontro el numero, termino

fi3	ldaa	#FILA3		; cargo la fila 3 con un 0
	staa	PORTC
	ldab	#3		; cargo B con el numero de fila
	jsr	evalfil
	bcc	finin		; si se encontro el numero, termino

	sec			; si no encontro el numero, pongo el carry en 1.
	bra	endin

finin	tba			; transfiero el valor de B con el numero encontrado en A.

endin	pulb			; recupero el registro B

	rts



*************************************************************************************************
*				EVALFIL 							*
* Desc: Evalua el valor devuelto por el teclado (una vez que es cargada				*
*	la mascara de fila) y segun el numero de fila que se evaluo, devuelve el ID de la tecla	*
*	presionada en hexadecimal (de $0 a $F)								*
*		devuelve el numero apretado en el teclado en valor hexadecimal
*		- Recibe por B el numero de fila donde se lo encontro (0-3)
*		- Devuelve por B el numero apretado en el teclado en valor hexadecimal
*		- Pone el carry en 1 si no encontro el numero, y en 0 en caso de haberlo encontrado
* 
*******************************************************************************************************
evalfil	equ	*

	psha

	ldaa	#4
	mul			; hago que B valga el menor numero que aparece entre las teclas de la fila
	
	ldaa	PORTC		; leo el puerto C
	anda	#NIBMASK	; hago una mascara para obtener solo los 4 bits mas significativos (columnas)
	
	cmpa	#NIBMASK
	beq	_input  	; de ser todos 1, no se apreto ninguna tecla, termino la subrutina

	cmpa	#COLUMN0		
	bne	sig1		; si la tecla apretada no estaba en la columna 0, me fijo si fue en 1
	ldaa	#0		; si fue en 0, cargo en A el valor num�rico 0
	bra	multi		; voy a calcular el numero

sig1	cmpa	#COLUMN1		
	bne	sig2		; si la tecla apretada no estaba en la columna 1, me fijo si fue en 2
	ldaa	#1		; si fue un 1, cargo en A el valor num�rico 1
	bra	multi		; voy a calcular el numero

sig2	cmpa	#COLUMN2
	bne	sig3		; si la tecla apretada no estaba en la columna 2, debe estar en 3
	ldaa	#2		; si fue un 2, cargo en A el valor num�rico 2
	bra	multi		; voy a calcular el numero

sig3	ldaa	#3		; en este punto la tecla apretada debe ser de la columna 3, por lo que cargo un 3 en A
	bra	multi		; voy a calcular el numero


multi	aba			; le sumo al valor de A (la columna), el valor de B, que apuntaba a la primera columna.
	tab			; devuelvo el valor en B

	ldaa	PORTC
	staa	PORTC		; actualizamos el puerto C para poder visualizar la tecla apretada
	
soltar	ldaa	PORTC		
	anda	#NIBMASK	; esperamos a que se suelte la tecla para que el programa siga, y asi poder mandar
	cmpa	#NIBMASK	; un caracter por vez que se presiona la tecla
	bne	soltar

	bra	fincon		; pongo el carry en 0, indicando que encontr� el numero

fincon	pula

	rts


*************************************************************************
*		# TESTED WORKING STABLE #	Sat 05  18:26		*
*************************************************************************
*		println	(PRINT LINE)					*
* Descripcion:								*
*	Imprime 4 caracteres en el display en una sola			*
* subrutina, utilizando un arreglo de 4 bytes (caracteres) en memoria	*
* como input para el display						*
*									*
* Params:								*
* 	- [AccY]: Pos. de memoria de la cadena que			*
*		desea imprimir						*
* 									*
* Nota: no devuelve valores, deja el AccY como estaba			*
*	antes de ejecutar la subrutina					*
*************************************************************************
* [XH] 0 <- (X)
* [XL] 1
* [PCH] 2
* [PCL] 3

println	equ	*
	pshy		backup Y
	psha		backup A
	pshb		backup B

	ldab	#4	;inicio B en 4
repite	equ	*
	decb
	ldaa	0,y	;leo el caracter en cuestion
	stab	PORTCL	;set the position 0-3
	staa	PORTB	;set the character
	iny

	tstb
	bne	repite

	pulb		recupero backup B
	pula		recupero backup A
	puly		recupero backup Y
	rts


*********************************************************
*		CLEAR	DISPLAY				*
* Descripcion:						*
*	Borra el contenido del display 			*
*							*
* Nota: no devuelve valores ni recibe parametros 	*
*********************************************************
clrdis	equ	*
	psha			backup de A
	pshb			backup de B

	ldab	#3		cantidad de ciclos menos 1 (para usarlo como index)
L05	ldaa	#' '		cargo un espacio
	jsr 	outchar		lo escribo en el display
	decb			decremento el indice
	bpl	L05		si es positivo, repito (hasta el cero)

	pulb			
	pula
	rts			retorno de la subrutina



*****************************************
*	outchar				*
* ACCA: Caracter a enviar		*
* ACCB: Posicion	(0-3)		*
*****************************************
outchar	equ	*
	stab	PORTCL	;set the position
	staa	PORTB	;set the character
	rts

*****************************************
*	initdis				*
* Inicia el display			*
*****************************************

initdis	equ	*
	psha
	ldaa	#$FF	;set for output
	staa	DDRC	;C output
	ldaa	PIOC	;get current value
	anda	#$FE	;reset bit 0 to 0
	staa	PIOC	;send it out
	pula
	rts

*************************************************************************************************************
	END

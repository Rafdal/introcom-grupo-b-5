*********************************************************
*							*
*		MODULE TESTING ENVIROMENT		*
*							*
* Cuando las cosas fallan, hay que probar por partes	*
*********************************************************
	p68h11

******* Ports ***************************

DDRC	equ	$1007		; data direction register for C
PIOC	equ	$1002		; for strobe B assertion change
PORTCL	equ	$1005		; port C latched
PORTB	equ	$1004		; port B
PORTC	equ	$1003		; rows


******* Cols and Row Ports **************

ROWS	equ	PORTC		; outputs
COLS	equ	PORTCL		; inputs

***** Row and column Masks *************************

FIL0	equ	00001110b  	; mascaras para manejo de filas
FIL1	equ	00001101b
FIL2	equ	00001011b
FIL3	equ	00000111b

COL0	equ	11100000b	; mascaras para manejo de columnas
COL1	equ	11010000b
COL2	equ	10110000b
COL3	equ	01110000b	

****** Keyboard Mask ********************
MASKOUT	equ	11110000b


$str_hand.def
$flowctrl.def

	ORG	$0030
disvar	FCC	'    '

	ORG	$0040
op1	RMB	1

	ORG	$0020
*********************************************************
*		MAIN PROGRAM				*
*********************************************************
	ORG	$2000
main	EQU	*
	lds	#stk_ini
	jsr	setup

	ldaa	op1
	psha

	ldy	#disvar		cargo la direccion del texto para el display
	jsr	numForm		AccA = code, AccB = val

	%switch	OP,0,2
	pula
	ldy	#$EEEE
	bra	end_op
OP0000	equ	*		0 - sumar '+'
	ldy	#$AAAA		marco fin
	pula
	aba
	staa	op1
	bra	end_op

OP0001	equ	*		1 - restar '-'
	ldy	#$BBBB		marco fin
	pula
	sba
	staa	op1
	bra	end_op

OP0002	equ	*		2 - CLEAR
	ldy	#$CCCC		marco fin
	pula
	ldaa	#0
	clr	op1
	bra	end_op

end_op	equ	*
fin	jmp	fin



*************************************************************************
*		# TESTED WORKING STABLE #	Sun 06  23:34		*
*************************************************************************
*			NUM FORM			*
*	     fomrulario de entrada numerica		*
* Funcionamiento:					*
*	Espera a que el usuario ingrese un valor y/o	*
* presione una tecla de control.			*
* Retorna con el valor ingresado (si corresponde) y con *
* el ID de la tecla (status code) de control presionada.*
*							*
* Inputs:						*
* 	[AccIY]: direc. mem. variable global display	*
* Outputs:						*
*	[AccB]: numero escrito				*
*	[AccA]: status code				*
* 							*
* STATUS CODES:						*
*	0 - sumar '+' 		AccB = valor ingresado	*
*	1 - restar '-'		AccB = valor ingresado	*
*	2 - CLEAR 		AccB = 0		*
*	3 - dividir '/'		AccB = valor ingresado	*
*	4 - multiplicar '*'	AccB = valor ingresado	*
*	5 - IGUAL '='		AccB = valor ingresado	*
*********************************************************
* [  cont  ] 0 <-(X)
* [  X L   ]
* [  X L   ]
* [  PC H  ]
* [  PC L  ]
numForm	EQU	*
	pshx
	ldaa	#2		cargo la cantidad maxima de caracteres en INPUT
	psha			creo dicha variable local
	tsx
	pshy
	ldab	#2		cargo el offset para mostrar los numeros
	aby			agrego el offset
	
	bra	break		voy a imprimir por pantalla

loop	equ	*
	jsr	waitkey		espero a recibir un ID de tecla. AccA = ID

	cmpa	#9		chequeo si esta en el rango 0-9 (numero)
	bls	isNum		si es un numero, lo analizo aparte

*				si no es un numero, analizo el caracter de control
	suba	#10		quitando el desface numerico del ID

*****************
* (AccA)	*
*  [0] A (+)	*
*  [1] B (-)	*
*  [2] C (Clear)*
*  [3] D (/)	*
*  [4] E (*)	*
*  [5] F (=)	*
*****************

	cmpa	#2
	bne	ret_val		Si no es el boton Clear, retorno con valores

**************** CLEAR BTN *********************
	ldab	#2		cargo la cantidad max. de caracteres
	cmpb	0,x		chequeo la cant. de caracteres usados
	beq	clear		si ninguno esta usado, voy a clear y salgo de la subrutina
	
	ldaa	#' '		sino, agrego un espacio por izquierda
	jsr	push_L		y borro el caracter de la derecha
	inc	0,x		incremento la cantidad de caracteres disponibles
	bra	break		e imprimo por pantalla


***************** NUMBER ANALYSIS ***********
isNum	equ	*		
	tst	0,x		si la cantidad de caracteres disponibles
	beq	break		es cero, salgo (no agrego nada)
	adda	#'0'		Si no lo es, agrego el desfase ASCII del caracter
	jsr	push_R		y lo agrego al vector
	dec	0,x		decremento la cantidad de caracteres disponibles


break	equ	*
**************** PRINT ****************
	ldaa	0,y		cargo los caracteres en memoria
	ldab	#1		y los muestro por tantalla
	jsr	outchar
	ldaa	1,y
	ldab	#0
	jsr	outchar

**************** END LOOP **************
	jmp	loop		repetir*
**************** END LOOP **************


**************** CLEAR ********************
*  Salgo de la subrutina y borro AccB
clear	equ	*
	ldab	#0
	bra	ret

************* RETURN VALUES *****************
*  Salgo de la subrutina con retorno de valores
ret_val	equ	*
	jsr	str2int

*********** RETORNO DE SUBRUTINA ***********
ret	equ	*	
	puly		recupero backup de Y
	ins		libero byte del stack usado por variable local
	pulx		recupero backup de X
	rts



















*********************************************************
*		SUBRUTINA SETUP				*
* Descripcion:						*
*	Realiza todas las configuraciones iniciales	*
*********************************************************
setup	EQU	*
	jsr	initdis		inicio el display y teclado
	jsr	clrdis		borro el display
	ldy	#disvar
	clr	0,y
	clr	1,y
	clr	2,y
	clr	3,y
* clr	op1
* clr	op1+1		inicio op1 en cero
	rts







*********************************************************************************************************
*													*
* Las siguientes subrutinas utilizan las constantes definidas anteriormente para poder funcionar	*
*													*
*********************************************************************************************************








*************************************************************************
*		# TESTED WORKING STABLE #	Sat 05  18:26		*
*************************************************************************
*		println	(PRINT LINE)					*
* Descripcion:								*
*	Imprime 4 caracteres en el display en una sola			*
* subrutina, utilizando un arreglo de 4 bytes (caracteres) en memoria	*
* como input para el display						*
*									*
* Params:								*
* 	- [AccY]: Pos. de memoria de la cadena que			*
*		desea imprimir						*
* 									*
* Nota: no devuelve valores, deja el AccY como estaba			*
*	antes de ejecutar la subrutina					*
*************************************************************************
* [XH] 0 <- (X)
* [XL] 1
* [PCH] 2
* [PCL] 3

println	equ	*
	pshy		backup Y
	psha		backup A
	pshb		backup B

	ldab	#4	;inicio B en 4
repite	equ	*
	decb
	ldaa	0,y	;leo el caracter en cuestion
	stab	PORTCL	;set the position 0-3
	staa	PORTB	;set the character
	iny

	tstb
	bne	repite

	pulb		recupero backup B
	pula		recupero backup A
	puly		recupero backup Y
	rts


*********************************************************
*		CLEAR	DISPLAY				*
* Descripcion:						*
*	Borra el contenido del display 			*
*							*
* Nota: no devuelve valores ni recibe parametros 	*
*********************************************************
clrdis	equ	*
	psha			backup de A
	pshb			backup de B

	ldab	#3		cantidad de ciclos menos 1 (para usarlo como index)
L05	ldaa	#' '		cargo un espacio
	jsr 	outchar		lo escribo en el display
	decb			decremento el indice
	bpl	L05		si es positivo, repito (hasta el cero)

	pulb			
	pula
	rts			retorno de la subrutina





*********************************************************
*		SUBRUTINA delay				*
*							*
* Esta subrutina genera un delay de aprox 1s para el	*
* simluador del wookie					*
* No recibe ningun parametro ni retorna valores, no 	*
* hace falta liberar el stack depues de invocarla	*
*********************************************************

delay	equ	*
	pshx			Hago backup de los registros	(4 ciclos)
	pshy							(5 ciclos)
	psha							(3 ciclos)
	pshb							(3 ciclos)
	ldaa	#14		Cargo la cantidad de repeticiones que hare con el loop1. (23 ciclos)
*								[TOTAL:17]

*	[LOOP1]: n recorridos del loop1 lleva n*(9+T) ciclos, siendo T los ciclos en total del loop2. 
loop1	ldy	#$D900		Cargo la cantidad de repeticiones que hare con el loop2. (4 ciclos)

* 	[LOOP2]: Un solo recorrido del loop2 lleva 9 ciclos, 55552 ($D900) recorridos del loop2 lleva 499968 ciclos
loop2	nop			retardo 		(2 ciclos)
	dey			decremento Y 		(4 ciclos)
	bne	loop2		salto si no es cero 	(3 ciclos)
*							[TOTAL:9]

	deca			decremento A	(2 ciclos)
	bne	loop1		si A!=0, repito (3 ciclos)


	ldy	#$12		Retardo 			(5 ciclos)
	pulb			Recupero el valor 		(4 ciclos)
	pula			de los	registros		(4 ciclos)
	puly							(6 ciclos)
	pulx							(5 ciclos)
	rts			Retorno de la rubrutina		(5 ciclos)
*				





*****************************************
*	outchar				*
* ACCA: Caracter a enviar		*
* ACCB: Posicion	(0-3)		*
*****************************************
outchar	equ	*
	stab	PORTCL	;set the position
	staa	PORTB	;set the character
	rts

*****************************************
*	initdis				*
* Inicia el display			*
*****************************************

initdis	equ	*
	psha
	ldaa	#$0F	;set for input/output
	staa	DDRC	;C output
	ldaa	PIOC	;get current value
	anda	#$FE	;reset bit 0 to 0
	staa	PIOC	;send it out
	pula
	rts







	ORG	$3000		FLACO ESTO VA AL FINAL DEL CODIGO
stack	RMB	50
stk_ini	EQU	*-1

	END